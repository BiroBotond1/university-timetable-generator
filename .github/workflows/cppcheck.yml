name: cppcheck-action-test

on:
  push: # Trigger on every push

jobs:
  build:
    name: cppcheck-test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Install Cppcheck
      - name: Install Cppcheck
        run: sudo apt-get install cppcheck -y

      # Step 3: Run Cppcheck and Collect Errors
      - name: Run Cppcheck
        run: |
          cppcheck --enable=all --inconclusive --xml . 2> cppcheck-errors.xml
          if [ -s cppcheck-errors.xml ]; then
            echo "Cppcheck detected issues. Failing the workflow."
            exit 1
          else
            echo "No issues detected."
          fi
      # Explanation:
      # - Collects all errors into `cppcheck-errors.txt`.
      # - Displays errors using `cat`.
      # - Fails the job if the file is not empty (`-s` checks if the file has content).

      # Step 4: Generate HTML Report Using Cppcheck's Built-in Tool
      - name: Generate HTML Report
        run: |
          cppcheck-htmlreport --file=cppcheck-errors.xml --report-dir=cppcheck-html --source-dir=.

       # Step 5: Upload the XML Report
      - name: Upload XML Report
        if: failure() # Run only if the Cppcheck step fails
        uses: actions/upload-artifact@v3
        with:
          name: cppcheck-xml-report
          path: cppcheck-errors.xml

      # Step 6: Upload the HTML Report Directory
      - name: Upload HTML Report
        if: failure() # Run only if the Cppcheck step fails
        uses: actions/upload-artifact@v3
        with:
          name: cppcheck-html-report
          path: cppcheck-html
